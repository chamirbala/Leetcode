class Solution {
    public void rotate(int[] nums, int k) {
        if(k==nums.length || nums.length==1 || nums==null)
            return;
        if(k>nums.length)
            k=k%nums.length;
        int left=0;
        int right = nums.length-1-k;
        int nextLeft = right + 1;
        
        while(left<right){
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
        
        right=nums.length-1;
        while(nextLeft<right){
            int temp = nums[nextLeft];
            nums[nextLeft] = nums[right];
            nums[right] = temp;
            nextLeft++;
            right--;
        }
        
        left=0;
        right=nums.length-1;
        while(left<right){
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }
}





------------------------------------------------------------------------------------------------------




Given an array, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105