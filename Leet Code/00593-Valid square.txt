class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        Map<Double,ArrayList<int[]>> map=new HashMap<>();
        
        List<int[]> points = new ArrayList<>();
        
        points.add(p1);
        points.add(p2);
        points.add(p3);
        points.add(p4);
        
        for(int i=0; i<points.size();i++){
            for(int j=i+1; j<points.size(); j++){
                double d = Math.sqrt(Math.pow(points.get(j)[0]-points.get(i)[0],2) + Math.pow(points.get(j)[1]-points.get(i)[1],2));
                if(d>0){
                    if(!map.containsKey(d))
                        map.put(d,new ArrayList<int[]>());
                    map.get(d).add(points.get(i));
                    map.get(d).add(points.get(j));
                }
                else 
                    return false;
            }
        }
        if(map.size()==2)
            return true;
        else
            return false;
    }
}





-----------------------------------------------------------------------------------------------------





Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.

The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.

A valid square has four equal sides with positive length and four equal angles (90-degree angles).

 

Example 1:

Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: true
Example 2:

Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
Output: false
Example 3:

Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]
Output: true
 

Constraints:

p1.length == p2.length == p3.length == p4.length == 2
-104 <= xi, yi <= 104