class Solution {
    public int minFallingPathSum(int[][] A) {
        if(A==null || A.length==0)
            return 0;
        if(A.length>1){
            for(int i=A.length-2;i>=0;i--){
                for(int j=0;j<A[i].length;j++){
                    if(i+1<A.length){
                        int min = A[i+1][j];
                        if(j>0)
                            min = Math.min(min, A[i+1][j-1]);
                        if(j<A[i].length-1)
                            min = Math.min(min, A[i+1][j+1]);
                        A[i][j]+=min;
                    }
                }
            }
            
        }
        
        int result= A[0][0];
        for(int i=0;i<A[0].length; i++)
            result = Math.min(result, A[0][i]);
        return result;
    }
}






------------------------------------------------------------------------------------------------------




Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100